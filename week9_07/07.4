#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'crosswordPuzzle' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts following parameters:
 *  1. STRING_ARRAY crossword
 *  2. STRING words
 */
 
class Space{
    public:
        int x;
        int y;
        int down;
        int count;
};

vector<Space> spaces;
vector<string> v_words;

Space makeSpace(int x, int y, int down, int count){
    Space ret;
    ret.x = x;
    ret.y = y;
    ret.down = down;
    ret.count = count;
    return ret;
}

vector<string> test(vector<string> board, int idx, int i){
    
    vector<string> trash;

    string word = v_words[idx];
    Space space = spaces[i];

    if ((int)word.length() != space.count) return trash;

    if (space.down == 0){ //horizontally
        
        //x is still
        int x = space.x;
        int y = space.y;
        int idxword = 0;

        while (y < 10 && (board[x][y] == '-' || board[x][y] == word[idxword])){
            board[x][y++] = word[idxword++];
        }

        if (idxword == word.length()) { //possible
            return board;
        }

    } else { //vertically
        
        //y is still
        int x = space.x;
        int y = space.y;
        int idxword = 0;

        while (x < 10 && (board[x][y] == '-' || board[x][y] == word[idxword])){
            board[x++][y] = word[idxword++];
        }

        if (idxword == word.length()) { //possible
            return board;
        }

    }
    
    return trash;
}

vector<string> f(vector<string> board, int idx){

    if (idx == (int)v_words.size()) return board;

    for (int i = 0; i < (int)spaces.size(); i++){
        
        vector<string> temp;
        temp = test(board, idx, i);

        if (temp.size() == 0) continue;

        //debug
        // for (int j = 0; j < temp.size(); j++){
        //     cout << temp[j] << endl;
        // }

        vector<string> ret;
        ret = f(temp, idx + 1);
        if (ret.size() > 0) return ret;
    }

    vector<string> trash;
    return trash;
}

int main (){
    vector<string> board;
    for (int i = 0; i < 10; i++){
        string x;
        cin >> x;
        board.push_back(x);
    }
    string words;
    cin >> words;

    //extracting the words
    string x = "";
    for (long unsigned int i = 0; i < words.length(); i++){
        if (words[i] == ';') {
            v_words.push_back(x);
            x = "";
            continue;
        }
        x += words[i];
    }
    v_words.push_back(x);

    //horizontally
    int count;
    for (int i = 0; i < 10; i++){
        count = 0;
        for (int j = 0; j < 10; j++){
            if (board[i][j] == '-'){
                count++;
                if (j == 9){
                    spaces.push_back(makeSpace(i, j - count + 1, 0, count));
                }
            } else {
                if (count > 1){
                    spaces.push_back(makeSpace(i, j - count, 0, count));
                }
                count = 0;
            }
        }
    }

    //vertically
    for (int j = 0; j < 10; j++){
        count = 0;
        for (int i = 0; i < 10; i++){
            if (board[i][j] == '-'){
                count++;
                if (i == 9){
                    spaces.push_back(makeSpace(i - count + 1, j, 1, count));
                }
            } else {
                if (count > 1){
                    spaces.push_back(makeSpace(i - count, j, 1, count));
                }
                count = 0;
            }
        }
    }

    //debug
    // for (int i = 0; i < spaces.size(); i++){
    //     cout << spaces[i].x << " " << spaces[i].y << " " << spaces[i].down << " " << spaces[i].count << endl;
    // }

    vector<string> res;
    res = f(board, 0);
    for (int i = 0; i < res.size(); i++){
        cout << res[i] << endl;
    }
    return 0;
}



